FROM docker.io/node:20.11-alpine3.18 AS base

# Etap 1: Dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat

ARG APP_HOME=/app
WORKDIR ${APP_HOME}

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

RUN \
  if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Etap 2: Building Application
FROM base AS builder
ARG APP_HOME=/app
WORKDIR ${APP_HOME}

COPY --from=deps /app/node_modules ./node_modules
COPY . ./

ENV NODE_ENV=production

# RUN rm -rf .next

RUN npm run build


# Etap 3: Run aplication as user named `nextjs`
FROM base AS runner
ARG APP_HOME=/app
WORKDIR ${APP_HOME}

ENV NODE_ENV=production

RUN addgroup -g 1001 -S nodejs && \
  adduser -S nextjs -u 1001 -G nodejs

# No need to copy whole /app folder because we use lightweight standalone method
# COPY --from=builder --chown=nextjs:nodejs /app/ .

COPY --from=builder /app/public ./public

COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static



RUN chown -R nextjs:nodejs ${APP_HOME}

USER nextjs

ENV PORT 3000

# CMD ["npm", "run", "start"] # No because output:standalone in next.config.mjs
# CMD ["npm", "run", "dev"]
CMD HOSTNAME=client node server.js
