name: "estate_prod_nw"

services:
  api: &api
    build:
      context: ./backend
      dockerfile: ./docker/local/django/Dockerfile
    image: estate_care_api
    container_name: estate_care_api
    volumes:
      - ./backend:/app:z
      # - estate_media:/app/media:z
      - ./backend/media:/app/media
      # - ./backend/staticfiles:/app/staticfiles # Redundant
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"
    env_file:
      - ./backend/.envs/.env.local
    depends_on:
      - postgres
      - mailpit
      - redis
    command: /app/docker/local/django/start.sh # ./backend/docker/local/django/start.sh
    networks:
      - estate_prod_nw

  postgres:
    build:
      context: ./backend
      dockerfile: ./docker/local/postgres/Dockerfile
    image: estate_care_postgres
    container_name: estate_care_postgres
    ports:
      - "5432:5432"
    volumes:
      # - estate_prod_postgres_data:/var/lib/postgresql/data
      - estate_care_test_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./backend/.envs/.env.local
    networks:
      - estate_prod_nw

  mailpit:
    image: docker.io/axllent/mailpit:v1.15
    container_name: estate_care_mailpit
    ports:
      - "8025:8025"
      - "1025:1025"
    volumes:
      - estate_care_mailpit_data:/data
    environment:
      MP_MAX_MESSAGES: 5000
      MP_DATA_FILE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - estate_prod_nw

  client:
    build:
      context: ./frontend
      dockerfile: ./docker/local/Dockerfile
    container_name: estate_care_client
    image: estate_care_client
    # ports:
    #   - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      # - /app/node_modules # Anonymous volumes
      - estate_node_modules:/app/node_modules
    environment:
      - WATCHPACK_POLLING=true # add WATCHPACK below line(uncomment it) so that hot module reloading can work when working with windows subsystem for linux.
    depends_on:
      - api
    networks:
      - estate_prod_nw

  redis:
    image: redis:7.0-alpine3.19
    command: redis-server --appendonly yes
    container_name: estate_care_redis
    volumes:
      - estate_care_redis_data:/data
    networks:
      - estate_prod_nw

  celeryworker:
    <<: *api
    image: estate_prod_celeryworker
    container_name: estate_care_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *api
    image: estate_prod_celerybeat
    container_name: estate_care_celerybeat
    command: /start-celerybeat

  flower:
    <<: *api
    image: estate_prod_flower
    container_name: estate_care_flower
    ports:
      - "5555:5555"
    command: /start-flower

  nginx:
    build:
      context: ./nginx/local
      dockerfile: Dockerfile
    restart: always
    container_name: estate_care_nginx
    ports:
      - "8080:80"
    volumes:
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
      # - estate_media:/app/media:z
      - estate_care_logs_store:/var/log/nginx
    depends_on:
      - api
    networks:
      - estate_prod_nw

networks:
  estate_prod_nw:
    external: true

volumes:
  # estate_media: {}
  estate_node_modules: {}
  # estate_prod_postgres_data: {}
  estate_care_test_postgres_data: {}
  estate_care_mailpit_data: {}
  estate_care_logs_store: {}
  estate_care_redis_data: {}
